PS C:\weather app> npm init -y
Wrote to C:\weather app\package.json:

{
  "name": "weather-app",
  "version": "1.0.0",
  "main": "script.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "description": ""
}



PS C:\weather app> npm install express sqlite3 axios cors dotenv
npm warn deprecated @npmcli/move-file@1.1.2: This functionality has been moved to @npmcli/fs
npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
npm warn deprecated npmlog@6.0.2: This package is no longer supported.
npm warn deprecated rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported
npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
npm warn deprecated are-we-there-yet@3.0.1: This package is no longer supported.
npm warn deprecated gauge@4.0.4: This package is no longer supported.

added 206 packages, and audited 207 packages in 6s

28 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
PS C:\weather app> node server.js
>>
Server running on port 5000
Connected to SQLite database.

 *  History restored 

PS C:\weather app> node server.js
Server running on port 5000
Connected to SQLite database.


//server.js 
require("dotenv").config();
const express = require("express");
const sqlite3 = require("sqlite3").verbose();
const axios = require("axios");
const cors = require("cors");

const app = express();
const PORT = 5000;
const API_KEY = "25854bf2095a5b06dc33e2603dc8e4ad";

app.use(cors());
app.use(express.json());

// Initialize SQLite database
const db = new sqlite3.Database("./weather.db", sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, (err) => {
  if (err) console.error(err.message);
  console.log("Connected to SQLite database.");
});

// Create table if not exists
db.run(
  `CREATE TABLE IF NOT EXISTS forecast (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    city TEXT,
    date TEXT,
    temp REAL
  )`
);


// Create cities table if not exists(for Populate Data Feature)
db.run(
  `CREATE TABLE IF NOT EXISTS forecast (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL
    )`
);
// Fetch weather data
app.get("/weather/:city", async (req, res) => {
    const city = req.params.city;
    try {
        const response = await axios.get(
            `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&appid=${API_KEY}`
        );

        const forecasts = response.data.list.filter((item, index) => index % 8 === 0);

        // Delete old city data first
        db.run("DELETE FROM forecast WHERE city = ?", [city], (err) => {
            if (err) console.error("Delete Error:", err.message);
        });

        // Insert new data into the database
        const insertStmt = db.prepare("INSERT INTO forecast (city, date, temp) VALUES (?, ?, ?)");
        
        forecasts.forEach((item) => {
            insertStmt.run(city, item.dt_txt, item.main.temp, (err) => {
                if (err) console.error("Insert Error:", err.message);
            });
        });

        insertStmt.finalize();

        res.json(forecasts);
    } catch (error) {
        console.error("API Fetch Error:", error.message);
        res.status(500).json({ error: "Failed to fetch data" });
    }
});

// Save searched city to the database
app.post("/api/populateData", (req, res) => {
  const { city } = req.body;

  if (!city) {
      return res.status(400).json({ error: "No city provided" });
  }

  // Insert the city into the database (ignore if already exists)
  db.run("INSERT OR IGNORE INTO cities (name) VALUES (?)", [city], (err) => {
      if (err) {
          console.error("Database Insert Error:", err.message);
          return res.status(500).json({ error: "Failed to save city" });
      }
      console.log(`City '${city}' saved successfully!`);
      res.json({ message: `City '${city}' saved successfully!` });
  });
});



// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});




